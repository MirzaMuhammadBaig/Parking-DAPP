/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ParkingInterface extends ethers.utils.Interface {
  functions: {
    "buyTicket(string,uint256,uint8)": FunctionFragment;
    "cancelTicket(string)": FunctionFragment;
    "changeZonePrice(uint256,uint8)": FunctionFragment;
    "getTicket(string)": FunctionFragment;
    "isTicketValid(string,uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTicket(string,string,address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "zonePricePerMinute(uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTicket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeZonePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTicket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTicketValid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTicket",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zonePricePerMinute",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeZonePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTicketValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zonePricePerMinute",
    data: BytesLike
  ): Result;

  events: {
    "LogTicketBought(string,uint256,uint8)": EventFragment;
    "LogTicketCanceled(string,uint256)": EventFragment;
    "LogTicketRenewed(string,uint256,uint8)": EventFragment;
    "LogTicketTransfered(string,string)": EventFragment;
    "LogZonePriceChanged(uint256,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogTicketBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTicketCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTicketRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTicketTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogZonePriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type LogTicketBoughtEvent = TypedEvent<
  [string, BigNumber, number] & {
    plate: string;
    numOfMinutes: BigNumber;
    zone: number;
  }
>;

export type LogTicketCanceledEvent = TypedEvent<
  [string, BigNumber] & { plate: string; balanceLeft: BigNumber }
>;

export type LogTicketRenewedEvent = TypedEvent<
  [string, BigNumber, number] & {
    plate: string;
    numOfMinutes: BigNumber;
    zone: number;
  }
>;

export type LogTicketTransferedEvent = TypedEvent<
  [string, string] & { oldPlate: string; newPlate: string }
>;

export type LogZonePriceChangedEvent = TypedEvent<
  [BigNumber, number] & { price: BigNumber; zone: number }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class Parking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ParkingInterface;

  functions: {
    buyTicket(
      plate: string,
      numOfMinutes: BigNumberish,
      zone: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelTicket(
      plate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeZonePrice(
      price: BigNumberish,
      zone: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTicket(
      plate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    isTicketValid(
      plate: string,
      zone: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTicket(
      oldPlate: string,
      newPlate: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zonePricePerMinute(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  buyTicket(
    plate: string,
    numOfMinutes: BigNumberish,
    zone: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelTicket(
    plate: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeZonePrice(
    price: BigNumberish,
    zone: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTicket(
    plate: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number]>;

  isTicketValid(
    plate: string,
    zone: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTicket(
    oldPlate: string,
    newPlate: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zonePricePerMinute(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    buyTicket(
      plate: string,
      numOfMinutes: BigNumberish,
      zone: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTicket(plate: string, overrides?: CallOverrides): Promise<void>;

    changeZonePrice(
      price: BigNumberish,
      zone: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getTicket(
      plate: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    isTicketValid(
      plate: string,
      zone: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTicket(
      oldPlate: string,
      newPlate: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    zonePricePerMinute(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LogTicketBought(string,uint256,uint8)"(
      plate?: string | null,
      numOfMinutes?: null,
      zone?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { plate: string; numOfMinutes: BigNumber; zone: number }
    >;

    LogTicketBought(
      plate?: string | null,
      numOfMinutes?: null,
      zone?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { plate: string; numOfMinutes: BigNumber; zone: number }
    >;

    "LogTicketCanceled(string,uint256)"(
      plate?: string | null,
      balanceLeft?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { plate: string; balanceLeft: BigNumber }
    >;

    LogTicketCanceled(
      plate?: string | null,
      balanceLeft?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { plate: string; balanceLeft: BigNumber }
    >;

    "LogTicketRenewed(string,uint256,uint8)"(
      plate?: string | null,
      numOfMinutes?: null,
      zone?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { plate: string; numOfMinutes: BigNumber; zone: number }
    >;

    LogTicketRenewed(
      plate?: string | null,
      numOfMinutes?: null,
      zone?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { plate: string; numOfMinutes: BigNumber; zone: number }
    >;

    "LogTicketTransfered(string,string)"(
      oldPlate?: string | null,
      newPlate?: null
    ): TypedEventFilter<
      [string, string],
      { oldPlate: string; newPlate: string }
    >;

    LogTicketTransfered(
      oldPlate?: string | null,
      newPlate?: null
    ): TypedEventFilter<
      [string, string],
      { oldPlate: string; newPlate: string }
    >;

    "LogZonePriceChanged(uint256,uint8)"(
      price?: null,
      zone?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { price: BigNumber; zone: number }
    >;

    LogZonePriceChanged(
      price?: null,
      zone?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { price: BigNumber; zone: number }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    buyTicket(
      plate: string,
      numOfMinutes: BigNumberish,
      zone: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelTicket(
      plate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeZonePrice(
      price: BigNumberish,
      zone: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTicket(plate: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTicketValid(
      plate: string,
      zone: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTicket(
      oldPlate: string,
      newPlate: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zonePricePerMinute(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTicket(
      plate: string,
      numOfMinutes: BigNumberish,
      zone: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelTicket(
      plate: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeZonePrice(
      price: BigNumberish,
      zone: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTicket(
      plate: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTicketValid(
      plate: string,
      zone: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTicket(
      oldPlate: string,
      newPlate: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zonePricePerMinute(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
